cmake_minimum_required(VERSION 3.1.0)

project(ice_script_functional_tests)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(Boost_USE_STATIC_LIBS ON)
find_package(Boost REQUIRED COMPONENTS unit_test_framework)

if(APPLE)
  find_library(BOOST_TIMER_LIBRARY NAMES
    ${BOOST_FILENAME_PREFIX}boost_timer${BOOST_FILENAME_POSTFIX}.dylib
    PATHS ${BOOST_LIBRARY_DIRS}
    NO_DEFAULT_PATH
  )
  find_library(BOOST_TIMER_LIBRARY NAMES
    ${BOOST_FILENAME_PREFIX}boost_timer${BOOST_FILENAME_POSTFIX}.dylib
    PATHS ${BOOST_LIBRARY_DIRS}
  )
endif()

if(WIN32)
#  configure_file(${freeimage_LIB_DIRS}/../bin/FreeImage.dll ./ COPYONLY)
elseif(UNIX)
#  configure_file(${FREEIMAGE_LIBRARY} ./libfreeimage.so.3 COPYONLY)
#  configure_file(${BOOST_SYSTEM_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_CHRONO_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_ATOMIC_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_PROGRAM_OPTIONS_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_FILESYSTEM_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_THREAD_LIBRARY_FILENAME} ./ COPYONLY)
#  configure_file(${BOOST_LOG_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_LOG_SETUP_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_DATE_TIME_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_REGEX_LIBRARY} ./ COPYONLY)
#  configure_file(${BOOST_UNIT_TEST_FRAMEWORK_LIBRARY} ./ COPYONLY)
#  configure_file(${ASSIMP_LIBRARY} ./ COPYONLY)
#  configure_file(${ENTITYX_LIBRARY} ./ COPYONLY)
endif()

file(COPY ../functional/fixtures DESTINATION ./)

if(APPLE)
  configure_file(${BOOST_SERIALIZATION_LIBRARY} ./ COPYONLY)
  configure_file(${BOOST_TIMER_LIBRARY} ./ COPYONLY)
endif()

macro(create_test TEST_NAME EXECUTABLE_NAME SOURCE)
#  add_executable(${EXECUTABLE_NAME} "src/${SOURCE}" "../src/parser/Test.cpp" "../src/parser/rules/NumberRule.cpp")
  add_executable(${EXECUTABLE_NAME} "src/${SOURCE}")

  add_dependencies(${EXECUTABLE_NAME} ice_script)

#  target_link_options(${EXECUTABLE_NAME} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/WHOLEARCHIVE:ice_script.lib>)
#  SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES LINK_FLAGS_DEBUG "/WHOLEARCHIVE:ice_script.lib")
#  target_link_options(${EXECUTABLE_NAME} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/OPT:NOREF>)

  if(MSVC)
#    target_link_libraries(${EXECUTABLE_NAME} ../${CMAKE_BUILD_TYPE}/ice_script)
  else()
#    target_compile_definitions(${EXECUTABLE_NAME} PRIVATE -DBOOST_TEST_DYN_LINK)
#    target_link_libraries(${EXECUTABLE_NAME} ice_script)
  endif()

    target_link_libraries(${EXECUTABLE_NAME} PRIVATE ice_script)
    target_include_directories(${EXECUTABLE_NAME} PRIVATE include)

    target_link_libraries(${EXECUTABLE_NAME} PRIVATE Boost::unit_test_framework)

  if(UNIX AND NOT APPLE)
    # target_link_libraries(${EXECUTABLE_NAME} PUBLIC ${X11_LIBRARIES})
    # target_link_libraries(${EXECUTABLE_NAME} PUBLIC ${X11_Xext_LIB})
    # target_link_libraries(${EXECUTABLE_NAME} PUBLIC ${X11_Xxf86vm_LIB})
    target_link_libraries(${EXECUTABLE_NAME} PUBLIC Threads::Threads)
    target_link_libraries(${EXECUTABLE_NAME} PUBLIC ${CMAKE_DL_LIBS})
  endif()

  if(WIN32)
    target_link_libraries(${EXECUTABLE_NAME} PRIVATE winmm)
    target_link_libraries(${EXECUTABLE_NAME} PRIVATE imm32)
    target_link_libraries(${EXECUTABLE_NAME} PRIVATE version)
    target_link_libraries(${EXECUTABLE_NAME} PRIVATE Psapi)
  endif()

  add_test(${TEST_NAME} ${EXECUTABLE_NAME})
endmacro()

#create_test(ParserTests ParserTests parser/Parser.cpp)
##create_test(ScriptRuleTests ScriptRuleTests parser/rules/ScriptRule.cpp)
##create_test(ClassRuleTests ClassRuleTests parser/rules/ClassRule.cpp)
##create_test(TypedefRuleTests TypedefRuleTests parser/rules/TypedefRule.cpp)
##create_test(NamespaceRuleTests NamespaceRuleTests parser/rules/NamespaceRule.cpp)
##create_test(FuncRuleTests FuncRuleTests parser/rules/FuncRule.cpp)
##create_test(InterfaceRuleTests InterfaceRuleTests parser/rules/InterfaceRule.cpp)
# create_test(VarRuleTests VarRuleTests parser/rules/VarRule.cpp)
#create_test(ImportRuleTests ImportRuleTests parser/rules/ImportRule.cpp)
#create_test(EnumRuleTests EnumRuleTests parser/rules/EnumRule.cpp)
##create_test(FuncdefRuleTests FuncdefRuleTests parser/rules/FuncdefRule.cpp)
##create_test(VirtpropRuleTests VirtpropRuleTests parser/rules/VirtpropRule.cpp)
##create_test(MixinRuleTests MixinRuleTests parser/rules/MixinRule.cpp)
##create_test(IntfmthdRuleTests IntfmthdRuleTests parser/rules/IntfmthdRule.cpp)
# create_test(StatblockRuleTests StatblockRuleTests parser/rules/StatblockRule.cpp)
# create_test(ParamlistRuleTests ParamlistRuleTests parser/rules/ParamlistRule.cpp)
##create_test(TypemodRuleTests TypemodRuleTests parser/rules/TypemodRule.cpp)
# create_test(TypeRuleTests TypeRuleTests parser/rules/TypeRule.cpp)
##create_test(InitlistRuleTests InitlistRuleTests parser/rules/InitlistRule.cpp)
##create_test(ScopeRuleTests ScopeRuleTests parser/rules/ScopeRule.cpp)
##create_test(DatatypeRuleTests DatatypeRuleTests parser/rules/DatatypeRule.cpp)
##create_test(PrimtypeRuleTests PrimtypeRuleTests parser/rules/PrimtypeRule.cpp)
##create_test(FuncattrRuleTests FuncattrRuleTests parser/rules/FuncattrRule.cpp)
##create_test(StatementRuleTests StatementRuleTests parser/rules/StatementRule.cpp)
##create_test(SwitchRuleTests SwitchRuleTests parser/rules/SwitchRule.cpp)
##create_test(BreakRuleTests BreakRuleTests parser/rules/BreakRule.cpp)
##create_test(ForRuleTests ForRuleTests parser/rules/ForRule.cpp)
##create_test(WhileRuleTests WhileRuleTests parser/rules/WhileRule.cpp)
##create_test(DowhileRuleTests DowhileRuleTests parser/rules/DowhileRule.cpp)
#create_test(IfRuleTests IfRuleTests parser/rules/IfRule.cpp)
##create_test(ContinueRuleTests ContinueRuleTests parser/rules/ContinueRule.cpp)
##create_test(ExprstatRuleTests ExprstatRuleTests parser/rules/ExprstatRule.cpp)
##create_test(TryRuleTests TryRuleTests parser/rules/TryRule.cpp)
##create_test(ReturnRuleTests ReturnRuleTests parser/rules/ReturnRule.cpp)
##create_test(CaseRuleTests CaseRuleTests parser/rules/CaseRule.cpp)
##create_test(ExprRuleTests ExprRuleTests parser/rules/ExprRule.cpp)
##create_test(ExprtermRuleTests ExprtermRuleTests parser/rules/ExprtermRule.cpp)
##create_test(ExprvalueRuleTests ExprvalueRuleTests parser/rules/ExprvalueRule.cpp)
##create_test(ConstructcallRuleTests ConstructcallRuleTests parser/rules/ConstructcallRule.cpp)
##create_test(ExprpreopRuleTests ExprpreopRuleTests parser/rules/ExprpreopRule.cpp)
##create_test(ExprpostopRuleTests ExprpostopRuleTests parser/rules/ExprpostopRule.cpp)
##create_test(CastRuleTests CastRuleTests parser/rules/CastRule.cpp)
##create_test(LambdaRuleTests LambdaRuleTests parser/rules/LambdaRule.cpp)
##create_test(LiteralRuleTests LiteralRuleTests parser/rules/LiteralRule.cpp)
##create_test(FunccallRuleTests FunccallRuleTests parser/rules/FunccallRule.cpp)
##create_test(VaraccessRuleTests VaraccessRuleTests parser/rules/VaraccessRule.cpp)
# create_test(ArglistRuleTests ArglistRuleTests parser/rules/ArglistRule.cpp)
#create_test(AssignRuleTests AssignRuleTests parser/rules/AssignRule.cpp)
##create_test(ConditionRuleTests ConditionRuleTests parser/rules/ConditionRule.cpp)
##create_test(ExpropRuleTests ExpropRuleTests parser/rules/ExpropRule.cpp)
##create_test(BitopRuleTests BitopRuleTests parser/rules/BitopRule.cpp)
##create_test(MathopRuleTests MathopRuleTests parser/rules/MathopRule.cpp)
##create_test(CompopRuleTests CompopRuleTests parser/rules/CompopRule.cpp)
##create_test(LogicopRuleTests LogicopRuleTests parser/rules/LogicopRule.cpp)
##create_test(AssignopRuleTests AssignopRuleTests parser/rules/AssignopRule.cpp)
##create_test(IdentifierRuleTests IdentifierRuleTests parser/rules/IdentifierRule.cpp)
##create_test(NumberRuleTests NumberRuleTests parser/rules/NumberRule.cpp)
##create_test(StringRuleTests StringRuleTests parser/rules/StringRule.cpp)
##create_test(BitsRuleTests BitsRuleTests parser/rules/BitsRule.cpp)

# create_test(FunctionTypeTests FunctionTypeTests type/FunctionType.cpp)

# create_test(FunctionSymbolTests FunctionSymbolTests symbol/FunctionSymbol.cpp)

#create_test(AnalyzerTests AnalyzerTests analyzer/Analyzer.cpp)

create_test(LlvmIrTests LlvmIrTests generator/llvm/LlvmIr.cpp)

#create_test(ScriptingEngineTests ScriptingEngineTests scripting/ScriptingEngine.cpp)
#create_test(ParameterTests ParameterTests scripting/Parameter.cpp)
#create_test(CPreProcessorTests CPreProcessorTests CPreProcessor.cpp)
#create_test(AngelscriptCPreProcessorTests AngelscriptCPreProcessorTests scripting/angel_script/AngelscriptCPreProcessor.cpp)
